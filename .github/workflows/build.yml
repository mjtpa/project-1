name: Build APK

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # 1. التحقق من الكود
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. إعداد Python وإعداد البيئة
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. تثبيت الاعتمادات الأساسية
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            build-essential \
            ccache \
            git \
            zip \
            unzip \
            openjdk-18-jdk \
            libncurses5 \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            zlib1g-dev \
            python3-pip
          echo "JAVA_HOME=/usr/lib/jvm/java-18-openjdk-amd64" >> $GITHUB_ENV
          echo "/usr/lib/jvm/java-18-openjdk-amd64/bin" >> $GITHUB_PATH
          # تثبيت Buildozer مع إصدار محدد من Cython لتوافق أفضل
          pip install --upgrade pip cython==0.29.33 buildozer

      # 4. تثبيت Android SDK
      - name: Install Android SDK
        env:
          ANDROID_SDK_ROOT: /opt/android-sdk
        run: |
          sudo mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          sudo chown -R $USER:$USER $ANDROID_SDK_ROOT
          wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest
          mkdir -p $ANDROID_SDK_ROOT/licenses
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;36.0.0"
          # إنشاء رابط رمزي لتلبية توقع Buildozer (sdkmanager يُطلب في المسار القديم)
          sudo mkdir -p $ANDROID_SDK_ROOT/tools/bin
          sudo ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager

      # 5. استخدام الكاش لمجلدات Buildozer لتسريع البناء
      - name: Cache Buildozer directories
        uses: actions/cache@v3
        with:
          path: |
            .buildozer_global
            .buildozer
          key: buildozer-${{ hashFiles('buildozer.spec') }}

      # 6. تطبيق Patch لتعديل ملف _img_sdl2.pyx لإضافة "noexcept"
      - name: Patch _img_sdl2.pyx for noexcept compatibility
        run: |
          # البحث عن الملف باستخدام اسمه فقط
          FILE_PATH=$(find . -type f -name "_img_sdl2.pyx" | head -n 1)
          if [ -z "$FILE_PATH" ]; then
             echo "Warning: File _img_sdl2.pyx not found, skipping patch step."
          else
             echo "Patching file: $FILE_PATH"
             # تعديل دالة write لإضافة noexcept
             sed -i "s/&rwops_bytesio_write/&(<size_t (*)(SDL_RWops *, void *, size_t, size_t) noexcept>)rwops_bytesio_write/" "$FILE_PATH"
             # تعديل دالة close لإضافة noexcept
             sed -i "s/&rwops_bytesio_close/&(<int (*)(SDL_RWops *) noexcept>)rwops_bytesio_close/" "$FILE_PATH"
          fi

      # 7. بناء التطبيق باستخدام Buildozer
      - name: Build with Buildozer
        run: |
          export ANDROIDSDK=/opt/android-sdk
          # يُفترض أن يتم تنزيل NDK عن طريق Buildozer؛ يمكنك ضبط مسار NDK إذا قمت بتثبيته
          export ANDROIDNDK=/home/runner/.buildozer/android/platform/android-ndk-r25b
          export ANDROIDAPI=33
          export NDK_API=21
          buildozer --verbose android debug

      # 8. رفع الـ APK كـ artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: bin/*.apk
