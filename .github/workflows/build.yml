name: CI

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      # الخطوة 1: استخراج الكود
      - name: Checkout code
        uses: actions/checkout@v3

      # الخطوة 2: إعداد بايثون
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # الخطوة 3: تثبيت التبعيات
      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            build-essential \
            ccache \
            git \
            zip \
            unzip \
            openjdk-18-jdk \
            libncurses5 \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            zlib1g-dev \
            python3-pip \
            make \
            autoconf \
            automake \
            libtool \
            patchelf

          echo "JAVA_HOME=/usr/lib/jvm/java-18-openjdk-amd64" >> $GITHUB_ENV
          echo "$JAVA_HOME/bin" >> $GITHUB_PATH

          pip install --upgrade pip wheel setuptools
          pip install cython==0.29.33 buildozer==1.4.0

      # الخطوة 4: تثبيت Android SDK و NDK
      - name: Install Android tools
        env:
          ANDROID_SDK_ROOT: /opt/android-sdk
        run: |
          # إنشاء مجلدات SDK
          sudo mkdir -p $ANDROID_SDK_ROOT
          sudo chown -R $USER:$USER $ANDROID_SDK_ROOT

          # تنزيل وتثبيت أدوات القيادة
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

          # قبول الرخص
          mkdir -p $ANDROID_SDK_ROOT/licenses
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license

          # تثبيت المكونات الأساسية
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT \
            "platform-tools" "platforms;android-33" "build-tools;33.0.2" "ndk;25.2.9519653"

          # إعداد المتغيرات البيئية
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      # الخطوة 5: تهيئة Buildozer
      - name: Initialize Buildozer
        run: |
          # إنشاء ملف buildozer.spec إذا لم يكن موجوداً
          if [ ! -f buildozer.spec ]; then
            buildozer init
          fi

          # تنزيل python-for-android مسبقاً
          mkdir -p ~/.buildozer/android/platform
          git clone https://github.com/kivy/python-for-android.git ~/.buildozer/android/platform/python-for-android
          cd ~/.buildozer/android/platform/python-for-android
          git checkout master
          pip install -e .

      # الخطوة 6: البناء باستخدام Buildozer
      - name: Build with Buildozer
        run: |
          # إنشاء رابط رمزي للتتوافق مع Buildozer
          mkdir -p $ANDROID_SDK_ROOT/tools
          ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest/bin $ANDROID_SDK_ROOT/tools/bin

          # البناء بدون تنظيف أولي لتجنب المشكلة
          buildozer \
            --verbose \
            android debug \
            -- \
            --sdk_dir=$ANDROID_SDK_ROOT \
            --ndk_dir=$ANDROID_SDK_ROOT/ndk/25.2.9519653

      # الخطوة 7: رفع الملف الناتج
      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: bin/*.apk
