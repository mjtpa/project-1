
name: Build APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          sudo apt update && sudo apt install -y \
            build-essential \
            ccache \
            git \
            zip \
            unzip \
            openjdk-18-jdk \
            libncurses5 \
            libffi-dev \
            libssl-dev \
            libsqlite3-dev \
            zlib1g-dev \
            python3-pip \
            imagemagick \
            wget \
            curl

          echo "JAVA_HOME=/usr/lib/jvm/java-18-openjdk-amd64" >> $GITHUB_ENV
          echo "/usr/lib/jvm/java-18-openjdk-amd64/bin" >> $GITHUB_PATH

          # Install Python libraries
          pip install --upgrade pip setuptools wheel
          pip install cython==0.29.33 pillow
          pip install buildozer==1.5.0

      - name: Install Android SDK
        env:
          ANDROID_SDK_ROOT: /opt/android-sdk
        run: |
          sudo mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          sudo chown -R $USER:$USER $ANDROID_SDK_ROOT
          wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 5 \
            https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdline-tools.zip
          unzip cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

          mkdir -p $ANDROID_SDK_ROOT/licenses
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license

          $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;33.0.2"

          sudo mkdir -p $ANDROID_SDK_ROOT/tools/bin
          sudo ln -s $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager $ANDROID_SDK_ROOT/tools/bin/sdkmanager

      # Pre-download Android NDK to prevent timeout in buildozer
      - name: Pre-download Android NDK
        run: |
          mkdir -p ~/.buildozer/android/platform
          cd ~/.buildozer/android/platform
          
          echo "Downloading Android NDK..."
          curl -L --connect-timeout 30 --max-time 3600 \
            https://dl.google.com/android/repository/android-ndk-r25b-linux.zip \
            -o android-ndk-r25b-linux.zip || {
              echo "First download attempt failed, retrying..."
              sleep 10
              curl -L --connect-timeout 30 --max-time 3600 \
                https://dl.google.com/android/repository/android-ndk-r25b-linux.zip \
                -o android-ndk-r25b-linux.zip
            }
          
          if [ -f android-ndk-r25b-linux.zip ]; then
            echo "Unzipping Android NDK..."
            unzip -q android-ndk-r25b-linux.zip
            echo "NDK download and extraction complete"
          else
            echo "Failed to download Android NDK"
            exit 1
          fi

      # Pre-download and patch Apache Ant
      - name: Setup Apache Ant with Python 3 compatibility
        run: |
          mkdir -p ~/.buildozer/android/platform
          cd ~/.buildozer/android/platform
          
          # Download Apache Ant
          echo "Downloading Apache Ant..."
          curl -L https://archive.apache.org/dist/ant/binaries/apache-ant-1.9.4-bin.tar.gz -o apache-ant-1.9.4-bin.tar.gz
          
          # Extract Apache Ant
          echo "Extracting Apache Ant..."
          tar -xzf apache-ant-1.9.4-bin.tar.gz
          
          # Create Python 3 compatible runant.py
          echo "Creating Python 3 compatible runant.py..."
          cat > apache-ant-1.9.4/bin/runant.py << 'EOF'
#!/usr/bin/env python3
import os
import sys

def main():
    # Handle help option
    if len(sys.argv) == 2 and (sys.argv[1] == "-h" or sys.argv[1] == "--help"):
        print("Usage: runant.py [script options] [options] [target [target2 [target3] ...]]")
        sys.exit(0)
    
    # Check environment
    java_home = os.environ.get("JAVA_HOME", "")
    if not java_home or not os.path.isdir(java_home):
        print("Warning: JAVA_HOME is not defined correctly.")
        print("         ANT cannot execute java.")
    
    ant_home = os.environ.get("ANT_HOME", "")
    if not ant_home or not os.path.isdir(ant_home):
        print("Warning: ANT_HOME is not defined correctly.")
        print("         ANT cannot execute.")
        sys.exit(1)
    
    # Get Java command
    java_cmd = os.environ.get("JAVACMD", "")
    if not java_cmd:
        if os.path.isdir(os.path.join(java_home, "jre/bin")):
            java_cmd = os.path.join(java_home, "jre/bin/java")
        else:
            java_cmd = "java"
    
    # Prepare options
    ant_opts = os.environ.get("ANT_OPTS", "")
    if "-Xmx" not in ant_opts:
        ant_opts += " -Xmx512m"
    
    # Command args
    args = sys.argv[1:]
    ant_args = " ".join(args)
    ant_jar = os.path.join(ant_home, "lib/ant.jar")
    
    # Execute
    cmd = f"{java_cmd} {ant_opts} -classpath {ant_jar} -Dant.home={ant_home} org.apache.tools.ant.Main {ant_args}"
    sys.exit(os.system(cmd))

if __name__ == "__main__":
    main()
EOF
          
          # Make executable
          chmod +x apache-ant-1.9.4/bin/runant.py
          
          echo "Apache Ant setup complete"

      - name: Prepare required files
        run: |
          if [ ! -f "default_album_cover.gif" ]; then
            echo "Creating default_album_cover.gif"
            convert -size 100x100 xc:#456D89 default_album_cover.gif
          fi

          mkdir -p data
          cp default_album_cover.gif data/

          [ ! -f "playlist.json" ] && echo "[]" > playlist.json
          [ ! -f "theme.json" ] && echo '{"theme_name": "DeepPurple"}' > theme.json
          [ ! -f "data/playlist.json" ] && echo "[]" > data/playlist.json
          [ ! -f "data/theme.json" ] && echo '{"theme_name": "DeepPurple"}' > data/theme.json
          mkdir -p fonts

      - name: Patch Kivy for compatibility
        run: |
          pip install kivy==2.1.0
          SITE_PACKAGES=$(python -c "import site; print(site.getsitepackages()[0])")
          FILE_PATH="$SITE_PACKAGES/kivy/core/image/_img_sdl2.pyx"

          if [ -f "$FILE_PATH" ]; then
            echo "Patching file: $FILE_PATH"
            sed -i 's/&rwops_bytesio_write/&(<size_t (*)(SDL_RWops *, void *, size_t, size_t) noexcept>)rwops_bytesio_write/' "$FILE_PATH"
            sed -i 's/&rwops_bytesio_close/&(<int (*)(SDL_RWops *) noexcept>)rwops_bytesio_close/' "$FILE_PATH"
          else
            echo "Warning: File not found: $FILE_PATH"
          fi

      - name: Configure buildozer.spec
        run: |
          if [ ! -f "buildozer.spec" ]; then
            echo "Creating buildozer.spec file"
            buildozer init
          fi
          
          # Update buildozer configuration
          sed -i 's/^android.ndk =.*/android.ndk = 25b/' buildozer.spec
          sed -i 's/^android.sdk =.*/android.sdk = 33/' buildozer.spec
          sed -i 's/^#android.ndk_path =.*/android.ndk_path = ~\/.buildozer\/android\/platform\/android-ndk-r25b/' buildozer.spec
          sed -i 's/^#android.ant_path =.*/android.ant_path = ~\/.buildozer\/android\/platform\/apache-ant-1.9.4/' buildozer.spec

      - name: Build APK with Buildozer
        run: |
          export ANDROIDSDK=/opt/android-sdk
          export ANDROIDAPI=33
          export NDK_API=21
          
          # Build with increased timeout
          timeout 90m buildozer --verbose android debug || {
            echo "Buildozer failed. Checking logs..."
            find .buildozer -name "build.err.log" -exec cat {} \;
            find .buildozer -name "log*.txt" -exec cat {} \;
            exit 1
          }

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-app
          path: bin/*.apk
          
      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            .buildozer/android/platform/build-*/dists/**/build.log
            .buildozer/android/platform/build-*/dists/**/build.err.log
            .buildozer/android/platform/build-*/build.log
